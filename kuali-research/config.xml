<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>THIS IS THE STARTING POINT FOR A MANUAL BUILD OF THE KUALI-RESEARCH APPLICATION</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GIT_REPO_URL</name>
          <description>The git repository from which the build will pull source code.

</description>
          <defaultValue>https://github.com/bu-ist/kuali-research</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>LANDSCAPE</name>
          <description>The landscape to deploy to.
NOTE: 
   If &quot;sandbox&quot; is selected, the build will be based on the HEAD of the git master branch for kuali-research
   If &quot;ci&quot; is selected, the build will be based on the HEAD of the git bu-master branch for kuali-research
   If any other landscape is selected, whatever was last built for the ci is deployed to that landscape
   or, you can override this by selecting a specific git reference below (CI AND SANDBOX ONLY!!!).

</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>ci</string>
              <string>sandbox</string>
              <string>qa</string>
              <string>stage</string>
              <string>prod</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>DEBUG</name>
          <description>If checked, prints out would be calls to other jobs, but does not go through with them.


----------------------------------------------------------------------------------------------------------------------------------------
                                                CUSTOM GIT REFERENCE SELECTION
----------------------------------------------------------------------------------------------------------------------------------------

Use this section if the git reference that is default for the landscape you select is something you would like to override.
It is assumed that you are attempting to build against a feature branch, tag or commit.
</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@1.5.2">
          <name>GIT_REF_TYPE</name>
          <description>Select how you would like to determine your git commit ID
&lt;br&gt;
&lt;br&gt;</description>
          <randomName>choice-parameter-11109103687020</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.24">
              <script>def list = [&apos;Branch&apos;, &apos;Tag&apos;, &apos;Commit ID&apos;]</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.24">
              <script>def list = [error]</script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>kuali-research</projectName>
          <choiceType>PT_RADIO</choiceType>
          <filterable>false</filterable>
        </org.biouno.unochoice.ChoiceParameter>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@1.5.2">
          <name>GIT_REF</name>
          <description>The items in the selected git reference type
&lt;br&gt;
&lt;br&gt;</description>
          <randomName>choice-parameter-11109105201828</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.24">
              <script>if (&quot;branch&quot;.equalsIgnoreCase(GIT_REF_TYPE)) {
   def multiline = (&apos;git -c core.askpass=true ls-remote -h &apos; + GIT_REPO_URL).execute() | &apos;grep -i -P -o ^[^\\s]+\\s+refs/heads/\\K(.*)\$&apos;.execute()
   multiline.waitForOrKill(20000)
   def list = multiline.text.readLines()
} 
else if (&quot;tag&quot;.equalsIgnoreCase(GIT_REF_TYPE)) {
   def multiline = (&apos;git -c core.askpass=true ls-remote -t &apos; + GIT_REPO_URL).execute() | &apos;grep -i -P -o ^[^\\s]+\\s+refs/tags/\\K(.*)\$&apos;.execute() | &apos;grep -i -P ^[^\\^\\{\\}]+$&apos;.execute()
   multiline.waitForOrKill(20000)
   def list = multiline.text.readLines()
}
else if (&quot;commit id&quot;.equalsIgnoreCase(GIT_REF_TYPE)) {
   def list = [&quot;N/A&quot;]
}
else {
   def list = [&quot;&lt;- Select a git ref type -&gt;&quot;]
}</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.24">
              <script>def list = [error]</script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>kuali-research</projectName>
          <parameters class="linked-hash-map"/>
          <referencedParameters>GIT_REPO_URL, GIT_REF_TYPE</referencedParameters>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>false</filterable>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@1.5.2">
          <name>GIT_COMMIT_ID</name>
          <description>This is the git commit ID that the build will be based on.
&lt;br&gt;
&lt;br&gt;</description>
          <randomName>choice-parameter-11109106720814</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.24">
              <script>def process = null
def commitId = null
if (&quot;branch&quot;.equalsIgnoreCase(GIT_REF_TYPE)) {
   process = (&quot;git -c core.askpass=true ls-remote -h &quot; + GIT_REPO_URL + &quot; refs/heads/&apos; &quot; + GIT_REF).execute() | &apos;grep -i -P -o ^[^\\s]+&apos;.execute()
}
else if (&quot;tag&quot;.equalsIgnoreCase(GIT_REF_TYPE)) {
   process = (&quot;git -c core.askpass=true ls-remote -t &quot; + GIT_REPO_URL + &quot; refs/tags/&apos; &quot; + GIT_REF).execute() | &apos;grep -i -P -o ^[^\\s]+&apos;.execute()
}
else if(&quot;commit id&quot;.equalsIgnoreCase(GIT_REF_TYPE)) {
    process = &quot;echo N/A&quot;.execute()
}

if (process == null) {
   commitId = &quot;&lt;- Select a git ref type -&gt;&quot;
}
else {
   process.waitForOrKill(20000)
   def list = process.text.readLines()
   if (list == null || list.isEmpty()) {
      commitId = &quot;NO RESULTS!!!&quot;
   }
   else {
      commitId = list.get(0)
   }
}


if(GIT_REF_TYPE.isEmpty()) {
   return &quot;&lt;input type=&apos;text&apos; name=&apos;value&apos; disabled=true style=&apos;font-family:monospace; width:310px;&apos;&gt;&quot;
}
else if ( ! &quot;commit id&quot;.equalsIgnoreCase(GIT_REF_TYPE)) {
   return &quot;&lt;input type=&apos;text&apos; name=&apos;value&apos; value=&apos;&quot; + commitId + &quot;&apos; readonly=true style=&apos;font-family:monospace; width:310px;&apos;&gt;&quot;
}
else {
   return &quot;&lt;input type=&apos;text&apos; name=&apos;value&apos; style=&apos;font-family:monospace; width:310px;&apos;&gt;&quot;
}</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.24">
              <script>return &quot;&lt;input type=&apos;text&apos; name=&apos;value&apos; value=&apos;error&apos; readonly=true style=&apos;font-family:monospace; width:310px;&apos;&gt;&quot;</script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>kuali-research</projectName>
          <parameters class="linked-hash-map"/>
          <referencedParameters>GIT_REPO_URL, GIT_REF_TYPE, GIT_REF</referencedParameters>
          <choiceType>ET_FORMATTED_HTML</choiceType>
          <omitValueField>false</omitValueField>
        </org.biouno.unochoice.DynamicReferenceParameter>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>set +x

CLI=/var/lib/jenkins/jenkins-cli.jar
HOST=http://localhost:8080/
DOCKER_PUSH_LOG_FILE=/var/lib/jenkins/jobs/kuali-research-3-docker-push-image/lastSuccessful/log
LANDSCAPE=$(echo $LANDSCAPE | tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;)
GIT_REF_TYPE=$(echo $GIT_REF_TYPE | tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;)
BRANCH=&quot;&quot;
CANCEL_JOB=&quot;&quot;
EC2_IDS=()
# By convention, we are calling the repository name within the registry the same as the artifactid of the pom file 
# that the repository keeps images for. However if we want to break this rule and cause downstream jobs to push 
# and pull from the registry referencing a different repository name, then set this value accordingly.
#POM_ARTIFACTID_OVERRIDE=&quot;kuali-research&quot;

case &quot;$LANDSCAPE&quot; in
   &quot;sandbox&quot;)
      BRANCH=&quot;master&quot;
      POM_ARTIFACTID_OVERRIDE=&quot;&quot; # Configures downstream jobs to push and pull from a repository in the
                                 # remote repo whose name matches the artifact id found in the pom file.
      EC2_IDS=(&quot;i-099de1c5407493f9b&quot; &quot;i-0c2d2ef87e98f2088&quot;);;
   &quot;ci&quot;)
      BRANCH=&quot;bu-master&quot;
      EC2_IDS=(&quot;i-0258a5f2a87ba7972&quot; &quot;i-0511b83a249cd9fb1&quot;);;      
   &quot;qa&quot;)
      if [ -n &quot;${GIT_COMMIT_ID}&quot; ] ; then CANCEL_JOB=&quot;yes&quot;; fi
      EC2_IDS=(&quot;i-011ccd29dec6c6d10&quot;);;
   &quot;stage&quot;)
      if [ -n &quot;${GIT_COMMIT_ID}&quot; ] ; then CANCEL_JOB=&quot;yes&quot;; fi
      EC2_IDS=(&quot;i-090d188ea237c8bcf&quot; &quot;i-0cb479180574b4ba2&quot;);;
   &quot;prod&quot;)
      if [ -n &quot;${GIT_COMMIT_ID}&quot; ] ; then CANCEL_JOB=&quot;yes&quot;; fi
      EC2_IDS=(&quot;i-0534c4e38e6a24009&quot; &quot;i-07d7b5f3e629e89ae&quot;);;
esac

if [ &quot;$CANCEL_JOB&quot; == &quot;yes&quot; ] ; then
   echo &quot;INVALID PARAMETERS! CANCELLING BUILD.&quot;
   echo &quot;Custom git references are restricted for landscapes other than ci and sandbox&quot;
   echo &quot;Whatever you want to deploy to these landscapes must be built on the CI landscape first&quot;;
   exit 1;
fi

for i in $(seq ${#EC2_IDS[@]}); do
   EC2_ID=${EC2_IDS[i-1]}
   if ( [ $i -eq 1 ] &amp;&amp; [ &quot;$BRANCH&quot; != &quot;&quot; ] ); then
      # A) FULL BUILD AND DEPLOY (maven &amp; docker)
      #    (NOTE: several parameters are ommitted to invoke their default values.)
      if [ -n &quot;${GIT_COMMIT_ID}&quot; ] ; then
         if [ &quot;$GIT_REF_TYPE&quot; == &quot;branch&quot; ] ; then
            GIT_REFSPEC=&quot;+refs/heads/${GIT_REF}:refs/remotes/origin/${GIT_REF}&quot;
            GIT_BRANCHES_TO_BUILD=&quot;refs/heads/${GIT_REF}&quot;
         elif [ &quot;$GIT_REF_TYPE&quot; == &quot;tag&quot; ] ; then
            GIT_REFSPEC=&quot;+refs/tags/${GIT_REF}:refs/remotes/origin/tags/${GIT_REF}&quot;
            GIT_BRANCHES_TO_BUILD=&quot;refs/tags/${GIT_REF}&quot;
         else
            GIT_REFSPEC=&quot;+refs/heads/*:refs/remotes/origin/*&quot;
            GIT_BRANCHES_TO_BUILD=&quot;${GIT_COMMIT_ID}&quot;         
         fi
         CMD=&quot;java -jar ${CLI} -s ${HOST} build &apos;kuali-research-1-build-war&apos; -v -f \
            -p BRANCH=feature \
            -p GIT_REFSPEC=${GIT_REFSPEC} \
            -p GIT_BRANCHES_TO_BUILD=${GIT_BRANCHES_TO_BUILD} \
            -p EC2_INSTANCE_ID=${EC2_ID}&quot;      
      else
         CMD=&quot;java -jar ${CLI} -s ${HOST} build &apos;kuali-research-1-build-war&apos; -v -f \
            -p BRANCH=${BRANCH} \
            -p EC2_INSTANCE_ID=${EC2_ID}&quot;      
      fi
   elif ( [ ! -f $DOCKER_PUSH_LOG_FILE ] &amp;&amp; [ &quot;$DEBUG&quot; == false ] ); then
      echo &quot;PROBLEM!!! Cannot determine registry image to reference.&quot;;
      echo &quot;Cannot find log for most recent docker push job:&quot;;
      echo &quot;       ${DOCKER_PUSH_LOG_FILE}&quot;;
      echo &quot;Cancelling build...&quot;;
      exit 1;
   else
      # B) DEPLOY ONLY (docker) 
      #    Use aws CLI only to get new docker container running against updated image on target EC2 instance.
      #    It is assumed the corresponding docker image is already in the registry and will be the last one put there by jenkins.
      #    (NOTE: any parameters ommitted will invoke the default values.)

      POM_VERSION=$(cat ${DOCKER_PUSH_LOG_FILE} | grep -P &apos;digest&apos; | cut -d &apos;:&apos; -f 1 | tr -d &apos;[[:space:]]&apos;);

      CMD=&quot;java -jar ${CLI} -s ${HOST} build &apos;kuali-research-4-docker-run-container&apos; -v -f \
         -p EC2_INSTANCE_ID=${EC2_ID} \
         -p POM_VERSION=${POM_VERSION}&quot;
   fi
   
   if [ -n &quot;${POM_ARTIFACTID_OVERRIDE}&quot; ] ; then 
      CMD=&quot;$CMD -p POM_ARTIFACTID=${POM_ARTIFACTID_OVERRIDE}&quot;;
   fi
   
   [ &quot;$DEBUG&quot; == true ] &amp;&amp; echo $CMD || eval $CMD

done

set -x</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>