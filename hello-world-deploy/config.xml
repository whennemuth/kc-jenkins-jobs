<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>POM_VERSION</name>
          <description>The maven version number for the build</description>
          <defaultValue>0.0.1-SNAPSHOT</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>POM_ARTIFACTID</name>
          <description>The maven artifact id</description>
          <defaultValue>hello-world</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REMOTE_DOCKER_HOST</name>
          <description>The url of the EC2 instance that will be running the container based on the docker image wrapping the newly built war file.
Example: 10.57.237.84</description>
          <defaultValue>10.57.237.84</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ECR_URL</name>
          <description>The url of the elastic container registry (ECR) where the newly created image is to be pushed to from this server and pulled from by the target docker host for the image wrapping the newly built war file.</description>
          <defaultValue>730096353738.dkr.ecr.us-east-1.amazonaws.com/hello-world</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>PROFILE</name>
          <description>Determines which environment/landscape the deployment is for</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>sandbox</string>
              <string>test</string>
              <string>staging</string>
              <string>qa</string>
              <string>prod</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>set +x

# Remove any dangling items
if [ -n &quot;$(docker images --filter dangling=true -q)&quot; ] ; then 
   docker rmi -f $(docker images --filter dangling=true -q); 
   echo &quot;Removed dangling image(s)&quot;;
else
   echo &quot;No dangling images to remove&quot;;
fi
if [ -n &quot;$(docker volume ls -qf dangling=true)&quot; ] ; then 
   docker volume rm $(docker volume ls -qf dangling=true); 
   echo &quot;Removed dangling volume(s)&quot;;
else 
   echo &quot;No dangling volumes to remove&quot;;
fi

# Login to the registry
# NOTE: info on how to store credentials can be found at: 
#       http://docs.aws.amazon.com/cli/latest/topic/config-vars.html
#       requires ~/.aws/config
eval $(/usr/local/aws/bin/aws ecr get-login --profile ${PROFILE})

# NOTE: JENKINS_URL is the full URL of Jenkins, like http://server:port/jenkins/ 
#       Only available if Jenkins URL set in system configuration
JENKINS_WAR_URL=&quot;${JENKINS_URL}/job/${JOB_BASE_NAME}/ws/target/${POM_ARTIFACTID}-${POM_VERSION}.war&quot;
DOCKER_TAG=&quot;${ECR_URL}:${POM_VERSION}&quot;
DOCKER_BUILD_CONTEXT=&quot;git@github.com:bu-ist/kuali-research-docker.git#master:${POM_ARTIFACTID}/build.context&quot;

# Build the app image (the image will curl the jenkins war artifact into itself while it is building).
eval `ssh-agent -s`
ssh-add ~/.ssh/bu_github_id_docker_rsa
docker build -t ${DOCKER_TAG} --build-arg JENKINS_WAR_URL=${JENKINS_WAR_URL} ${DOCKER_BUILD_CONTEXT}
eval `ssh-agent -k`

# Push the newly created image to the registry
docker push ${ECR_URL}:${POM_VERSION}

## Execute a docker command over ssh on the application host to run a container against the new image in the registry
ssh \
   jenkins@${REMOTE_DOCKER_HOST} \
   -i /var/lib/jenkins/.ssh/bu_kuali_id_jenkins_rsa &quot;set -x &amp;&amp; docker ps &amp;&amp; &quot; \
   &quot;docker rm -f hwcontainer || echo &apos;No container to remove.&apos; &amp;&amp; &quot; \
   &quot;docker ${ECR_URL}:${POM_VERSION} &amp;&amp; &quot; \
   &quot;docker run&quot; \
   &quot; -d&quot; \
   &quot; -p 8080:8080&quot; \
   &quot; --restart unless-stopped&quot; \
   &quot; --name hwcontainer&quot; \
   &quot;${ECR_URL}:${POM_VERSION} &amp;&amp; &quot; \
   &quot;docker ps&quot;

set -x</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>