<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>REGISTRY_REPO_NAME</name>
          <description>This is used to identify the name of the docker registry repository that this image is going to be pushed to</description>
          <defaultValue>apache-shibboleth</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ECR_REGISTRY_URL</name>
          <description>The url of the elastic container registry (ECR) where the newly created image is to be pushed to from this server and pulled from by the target docker host</description>
          <defaultValue>730096353738.dkr.ecr.us-east-1.amazonaws.com</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_TAG_VERSION</name>
          <description>The value the image being built is to tagged with for identification within the local and registry repositories.</description>
          <defaultValue>latest</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EC2_INSTANCE_ID</name>
          <description>The id of the EC2 instance that will be running the container based on the docker image wrapping the newly built war file.
Example: i-099de1c5407493f9b</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>LANDSCAPE</name>
          <description>The landscape to deploy to.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>ci</string>
              <string>sandbox</string>
              <string>qa</string>
              <string>stage</string>
              <string>prod</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>DOCKER_TAG=&quot;${ECR_REGISTRY_URL}/${REGISTRY_REPO_NAME}:${DOCKER_TAG_VERSION}&quot;
CONTAINER_NAME=&quot;apache-shibboleth&quot;

# Have to encode the command being sent to ssm agent because of quote escaping restrictions.
# (jenkins removes double quotes and escapes single quotes and wraps command args with more single
#  quotes if they contain spaces, making it impossible to provide a string that is acceptable to send-command commands arg)
BASE64=$(\
   echo \
      &quot;if [ -n \&quot;\$(docker ps -a --filter name=${CONTAINER_NAME} -q)\&quot; ]; then \
         docker rm -f ${CONTAINER_NAME}; \
      fi &amp;&amp; \
      EXISTING_IMAGE_ID=\$(docker images \
            | grep -P \&quot;${ECR_REGISTRY_URL}/${REGISTRY_REPO_NAME}\s+${DOCKER_TAG_VERSION}\&quot; \
            | sed -r -n &apos;s/[[:blank:]]+/ /gp&apos; \
            | cut -d &apos; &apos; -f 3) &amp;&amp; \
      if [ -n \&quot;\${EXISTING_IMAGE_ID}\&quot; ]; then \
         docker rmi \${EXISTING_IMAGE_ID}; \
      fi &amp;&amp; \
      \
      eval \$(aws ecr get-login --profile ecr.access) &amp;&amp; \
      docker run \
         -d \
         -p 80:80 \
         -p 443:443 \
         -v /etc/pki/tls/certs:/etc/pki/tls/certs \
         -v /etc/pki/tls/private:/etc/pki/tls/private \
         -v /var/log/httpd:/var/log/httpd \
         -v /var/log/shibboleth:/var/log/shibboleth \
         -v /var/log/shibboleth-www:/var/log/shibboleth-www \
         -e LANDSCAPE=${LANDSCAPE} \
         --restart unless-stopped \
         --name ${CONTAINER_NAME} \
         ${DOCKER_TAG}&quot; | base64 -w 0 \
)

# Execute a docker command using the aws cli on the application host to run a container against the new image in the registry
# DOCUMENTATION: 
#     http://docs.aws.amazon.com/cli/latest/reference/ssm/send-command.html
#     http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/walkthrough-cli.html
run_command_id=$(aws ssm send-command \
   --instance-ids &quot;${EC2_INSTANCE_ID}&quot; \
   --document-name &quot;AWS-RunShellScript&quot; \
   --comment &quot;Running shell script to pull and run container against a new docker image for ${REGISTRY_REPO_NAME}&quot; \
   --parameters \
        commands=&quot;echo &gt;&gt; /tmp/ssm-apache-shib-received &amp;&amp; date &gt;&gt; /tmp/ssm-apache-shib-received &amp;&amp; \
                  echo ${BASE64} | base64 --decode &gt;&gt; /tmp/ssm-apache-shib-received &amp;&amp; \
                  echo ${BASE64} | base64 --decode &gt; /tmp/ssm-apache-shib-last.sh &amp;&amp; \
                  echo ${BASE64} | base64 --decode | sh&quot; \
   --profile &quot;ecr.access&quot; \
   --output text \
   --query &quot;Command.CommandId&quot;) 
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>