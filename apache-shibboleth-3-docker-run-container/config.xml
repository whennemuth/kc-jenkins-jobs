<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>REGISTRY_REPO_NAME</name>
          <description>This is used to identify the name of the docker registry repository that this image is going to be pushed to</description>
          <defaultValue>apache-shibboleth</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ECR_REGISTRY_URL</name>
          <description>The url of the elastic container registry (ECR) where the newly created image is to be pushed to from this server and pulled from by the target docker host</description>
          <defaultValue>730096353738.dkr.ecr.us-east-1.amazonaws.com</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_TAG_VERSION</name>
          <description>The value the image being built is to tagged with for identification within the local and registry repositories.</description>
          <defaultValue>latest</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EC2_INSTANCE_ID</name>
          <description>The id of the EC2 instance that will be running the container based on the docker image wrapping the newly built war file.
Example: i-099de1c5407493f9b</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>LANDSCAPE</name>
          <description>The landscape to deploy to.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>ci</string>
              <string>sandbox</string>
              <string>qa</string>
              <string>stage</string>
              <string>prod</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ROOT_DIR</name>
          <description>The root directory where the git repo containing bash scripts and docker contexts is pulled to.&lt;br&gt;
Need it here for supporting bash functions found in ./bash.lib.sh</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>VERBOSE</name>
          <description>If checked console output will be verbose</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>[ &quot;$VERBOSE&quot; == false ] &amp;&amp; set +x

# Need to get our hands on bash.lib.sh from github.
ROOT_DIR=&quot;$(echo $ROOT_DIR | sed &apos;s/,//g&apos;)&quot;
if [ -z &quot;$ROOT_DIR&quot; ] || [ ! -f &quot;$ROOT_DIR/bash.lib.sh&quot; ] ; then
  GIT_SCRIPT_URL=git@github.com:bu-ist/kuali-research-docker.git
  GIT_SCRIPT_BRANCH=master
  CLI=/var/lib/jenkins/jenkins-cli.jar
  HOST=http://localhost:8080/
  source /var/lib/jenkins/cli-credentials.sh
  java -jar ${CLI} -s ${HOST} build &apos;pull-docker-build-context&apos; -v -f \
    -p VERBOSE=false \
    -p GIT_REPO_URL=git@github.com:bu-ist/kuali-research-docker.git \
    -p GIT_BRANCH=master \
    -p TARGET_DIRECTORY=${WORKSPACE}
  [ ! -f &quot;${WORKSPACE}/bash.lib.sh&quot; ] &amp;&amp; echo &quot;ERROR! Cannot get bash.lib.sh from github!&quot; &amp;&amp; exit 1
  source &quot;${WORKSPACE}/bash.lib.sh&quot;
fi

DOCKER_TAG=&quot;${ECR_REGISTRY_URL}/${REGISTRY_REPO_NAME}:${DOCKER_TAG_VERSION}&quot;
CONTAINER_NAME=&quot;apache-shibboleth&quot;

# Have to encode the command being sent to ssm agent because of quote escaping restrictions.
# (jenkins removes double quotes and escapes single quotes and wraps command args with more single
#  quotes if they contain spaces, making it impossible to provide a string that is acceptable to send-command commands arg)
BASE64=$(\
   echo \
      &quot;set +x &amp;&amp; \
      export AWS_DEFAULT_REGION=us-east-1; \
      export AWS_DEFAULT_OUTPUT=json; \
      if [ -n \&quot;\$(docker ps -a --filter name=${CONTAINER_NAME} -q)\&quot; ]; then \
         docker rm -f ${CONTAINER_NAME}; \
      fi &amp;&amp; \
      EXISTING_IMAGE_ID=\$(docker images \
            | grep -P \&quot;${ECR_REGISTRY_URL}/${REGISTRY_REPO_NAME}\s+${DOCKER_TAG_VERSION}\&quot; \
            | sed -r -n &apos;s/[[:blank:]]+/ /gp&apos; \
            | cut -d &apos; &apos; -f 3) &amp;&amp; \
      if [ -n \&quot;\${EXISTING_IMAGE_ID}\&quot; ]; then \
         docker rmi -f \${EXISTING_IMAGE_ID}; \
      fi &amp;&amp; \
      \
      evalstr=\&quot;\$(aws ecr get-login)\&quot; &amp;&amp; \
      evalstr=\&quot;\$(echo \$evalstr | sed &apos;s/ -e none//&apos;)\&quot; &amp;&amp; \
      eval \&quot;\$evalstr\&quot; &amp;&amp; \
      docker run \
         -d \
         -p 80:80 \
         -p 443:443 \
         -v /etc/pki/tls/certs:/etc/pki/tls/certs \
         -v /etc/pki/tls/private:/etc/pki/tls/private \
         -v /var/log/httpd:/var/log/httpd \
         -v /var/log/shibboleth:/var/log/shibboleth \
         -v /var/log/shibboleth-www:/var/log/shibboleth-www \
         -e LANDSCAPE=${LANDSCAPE} \
         --restart unless-stopped \
         --name ${CONTAINER_NAME} \
         ${DOCKER_TAG} 2&gt;&amp;1 | tee /tmp/last-apache-run-cmd&quot; | base64 -w 0 \
)

# Execute a docker command using the aws cli on the application host to run a container against the new image in the registry
# DOCUMENTATION: 
#     http://docs.aws.amazon.com/cli/latest/reference/ssm/send-command.html
#     http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/walkthrough-cli.html
COMMAND_ID=$(aws ssm send-command \
   --instance-ids &quot;${EC2_INSTANCE_ID}&quot; \
   --document-name &quot;AWS-RunShellScript&quot; \
   --comment &quot;Running shell script to pull and run container against a new docker image for ${REGISTRY_REPO_NAME}&quot; \
   --parameters \
        commands=&quot;echo &gt;&gt; /tmp/ssm-apache-shib-received &amp;&amp; date &gt;&gt; /tmp/ssm-apache-shib-received &amp;&amp; \
                  echo ${BASE64} | base64 --decode &gt;&gt; /tmp/ssm-apache-shib-received &amp;&amp; \
                  echo ${BASE64} | base64 --decode &gt; /tmp/ssm-apache-shib-last.sh &amp;&amp; \
                  echo ${BASE64} | base64 --decode | sh&quot; \
   --output text \
   --query &quot;Command.CommandId&quot; \
   --output-s3-bucket-name &quot;kuali-docker-run-stdout&quot; \
   --output-s3-key-prefix &quot;apache&quot;) 
   
echo &quot;COMMAND_ID=$COMMAND_ID&quot;

# The file output by ssm send-command won&apos;t be available in s3 immediately, so
# making repeated attempts to access it in a loop until it is available.
i=1
while ((i&lt;30)) ; do
  s3Url=&quot;$(s3GetApacheSendCommandOutputFileUrl $COMMAND_ID)&quot;
  [ -n &quot;$s3Url&quot; ] &amp;&amp; echo &quot;Url to presign is: $s3Url&quot; &amp;&amp; break;
  echo &quot;Url to presign not ready. Trying again in 3 seconds...&quot;
  ((i+=1))
  sleep 3
done

if [ -n &quot;$s3Url&quot; ] ; then
  # Have the s3 url of the stdout file presigned so a we can access it with a new url that will get around
  # the private access restriction.
  days=10
  seconds=&quot;$((60*60*24*${days}))&quot;
  httpUrl=&quot;$(aws s3 presign &quot;${s3Url}&quot; --expires-in=${seconds})&quot;
  echo &quot;Access the docker container creation output on the remote EC2 instance ($EC2_INSTANCE_ID}) at:&quot;
  echo &quot; &quot;
  echo &quot;$httpUrl&quot;
  echo &quot; &quot;
  echo &quot;You may have to wait for about a minute for the link to become available&quot;
  echo &quot;(link expires in $days days)&quot;
  echo &quot; &quot;
else
  echo &quot;WARNING! Could not acquire s3 location of ssm send-command output file!&quot;
  echo &quot;You will have to shell into the ec2 instance and open /tmp/last-apache-run-cmd to determine how it went.&quot;
fi</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>