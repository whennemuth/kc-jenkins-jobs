<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>This job shells into a specified target EC2 instance and executes docker commands.&#xd;
1) Remove the existing image from the local docker repository if it exists&#xd;
2) Log into our AWS docker registry using an AWS API call&#xd;
3) Pull an updated docker image from the registry to the local docker repository.&#xd;
4) Run a new container based on the new image.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ECR_REGISTRY_URL</name>
          <description>Indicates the location of the elastic container registry (ECR) where the docker image to be pulled resides.
Combined with the POM_VERSION, this value also serves to identify the docker image in the registry.</description>
          <defaultValue>730096353738.dkr.ecr.us-east-1.amazonaws.com</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>POM_VERSION</name>
          <description>The maven version number for the war file the docker image being pulled is based on.
Combined with ECR_URL, this value serves to identify the docker image in the registry.
Look in the pom file of what was built to determine what this should be.</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REGISTRY_REPO_NAME</name>
          <description>This value comes from the maven artifact id (except for sandbox builds).
Look in the pom file of what was built to determine what this should be.
This is used to identify the name of the docker registry repository that this image is going to be pulled from.
The value is &quot;coeus&quot; by default, but remember that any sandbox images should go to a registry repository called &quot;coeus-sandbox&quot;</description>
          <defaultValue>coeus</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EC2_INSTANCE_ID</name>
          <description>The id of the EC2 instance that will be running the container based on the docker image wrapping the newly built war file.
Example: i-099de1c5407493f9b</description>
          <defaultValue>i-0258a5f2a87ba7972</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ATTACHMENTS_DIR</name>
          <description>Directory where files uploaded by users are deposited by the webapp</description>
          <defaultValue>/var/log/kuali/attachments</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JAVAMELODY_DIR</name>
          <description>Directory where files saved by javamelody are located.</description>
          <defaultValue>/var/log/kuali/javamelody</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRINTING_DIR</name>
          <description>Directory where printing job artifacts are stored for download to user.</description>
          <defaultValue>/var/log/kuali/printing</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>DOCKER_TAG=&quot;${ECR_REGISTRY_URL}/${REGISTRY_REPO_NAME}:${POM_VERSION}&quot;
CONTAINER_NAME=&quot;kuali-research&quot;
# /mnt/efs/kuali/attachments
# /mnt/efs/kuali/javamelody
# /mnt/efs/kuali/printing
[ -z &quot;$ATTACHMENTS_DIR&quot; ] &amp;&amp; ATTACHMENTS_DIR=&quot;/var/log/kuali/attachments&quot;
[ -z &quot;$JAVAMELODY_DIR&quot; ] &amp;&amp; JAVAMELODY_DIR=&quot;/var/log/kuali/javamelody&quot;
[ -z &quot;$PRINTING_DIR&quot; ] &amp;&amp; PRINTING_DIR=&quot;/var/log/kuali/printing&quot;


# Have to encode the command being sent to ssm agent because of quote escaping restrictions.
# (jenkins removes double quotes and escapes single quotes and wraps command args with more single
#  quotes if they contain spaces, making it impossible to provide a string that is acceptable to send-command commands arg)
BASE64=$(\
   echo \
      &quot;if [ -n \&quot;\$(docker ps -a --filter name=${CONTAINER_NAME} -q)\&quot; ]; then \
         docker rm -f ${CONTAINER_NAME}; \
      fi &amp;&amp; \
      EXISTING_IMAGE_ID=\$(docker images \
            | grep -P \&quot;${ECR_REGISTRY_URL}/${REGISTRY_REPO_NAME}\s+${POM_VERSION}\&quot; \
            | sed -r -n &apos;s/[[:blank:]]+/ /gp&apos; \
            | cut -d &apos; &apos; -f 3) &amp;&amp; \
      if [ -n \&quot;\${EXISTING_IMAGE_ID}\&quot; ]; then \
         docker rmi -f \${EXISTING_IMAGE_ID}; \
      fi &amp;&amp; \
      \
      export AWS_DEFAULT_REGION=us-east-1; \
      export AWS_DEFAULT_OUTPUT=json; \
      evalstr=\$(aws ecr get-login) &amp;&amp; \
      evalstr=\$(echo \$evalstr | sed &apos;s/ -e none//&apos;) &amp;&amp; \
      echo \$evalstr &gt; /tmp/last-ecr-login &amp;&amp; \
      eval \$evalstr &amp;&amp; \
      docker run \
         -d \
         -p 8080:8080 \
         -p 8009:8009 \
         -e EC2_HOSTNAME=\$(echo \$HOSTNAME) \
         -h \$(echo \$HOSTNAME) \
         -v /opt/kuali/main/config:/opt/kuali/main/config \
         -v $PRINTING_DIR:/opt/kuali/logs/printing/logs \
         -v $JAVAMELODY_DIR:/var/log/javamelody \
         -v $ATTACHMENTS_DIR:/opt/tomcat/temp/dev/attachments \
         -v /var/log/tomcat:/opt/tomcat/logs \
         --restart unless-stopped \
         --name ${CONTAINER_NAME} \
         ${DOCKER_TAG} &gt; /tmp/last-coeus-run-cmd 2&gt;&amp;1&quot; | base64 -w 0 \
)
# NOTE: Not sure why, but all commands up to the the docker run command would execute, but you have
# to redirect stdout and stderr of the docker run command to a file for it to work as well.
# This was not always necessary - became necessary without an explanation as to why.

# Execute a docker command using the aws cli on the application host to run a container against the new image in the registry
# DOCUMENTATION: 
#     http://docs.aws.amazon.com/cli/latest/reference/ssm/send-command.html
#     http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/walkthrough-cli.html
run_command_id=$(aws ssm send-command \
   --instance-ids &quot;${EC2_INSTANCE_ID}&quot; \
   --document-name &quot;AWS-RunShellScript&quot; \
   --comment &quot;Running shell script to pull and run container against a new docker image for ${REGISTRY_REPO_NAME}&quot; \
   --parameters \
        commands=&quot;echo &gt;&gt; /tmp/ssm-received &amp;&amp; date &gt;&gt; /tmp/ssm-received &amp;&amp; \
                  echo ${BASE64} | base64 --decode &gt;&gt; /tmp/ssm-received &amp;&amp; \
                  echo ${BASE64} | base64 --decode &gt; /tmp/ssm-last.sh &amp;&amp; \
                  echo ${BASE64} | base64 --decode | sh&quot; \
   --output text \
   --query &quot;Command.CommandId&quot;) 
   
## Execute a docker command over ssh on the application host to run a container against the new image in the registry
# ssh \
#   jenkins@${REMOTE_DOCKER_HOST} \
#   -i /var/lib/jenkins/.ssh/bu_kuali_id_jenkins_rsa \
#   &quot;set -x &amp;&amp; docker ps &amp;&amp; &quot; \
#   &quot;docker rm -f ${CONTAINER_NAME} || echo &apos;No container to remove.&apos; &amp;&amp; &quot; \
#   &quot;eval $(aws ecr get-login) &amp;&amp; &quot; \
#   &quot;docker run&quot; \
#    -d&quot; \
#    -p 8080:8080&quot; \
#    -p 8009:8009&quot; \
#    -v /opt/kuali/main/config:/opt/kuali/main/config \
#    -v /var/log/kuali:/var/log/kuali \
#    -v /var/log/tomcat:/var/log/tomcat \
#    --restart unless-stopped \
#    --name ${CONTAINER_NAME} \
#    ${DOCKER_TAG} &amp;&amp; &quot; \
#   &quot;docker ps&quot;
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>