<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ECR_REGISTRY_URL</name>
          <description>Indicates the location of the elastic container registry (ECR) where the docker image to be pulled resides.
Combined with the POM_VERSION, this value also serves to identify the docker image in the registry.</description>
          <defaultValue>730096353738.dkr.ecr.us-east-1.amazonaws.com</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>POM_VERSION</name>
          <description>The maven version number for the war file the docker image being pulled is based on.
Combined with ECR_URL, this value serves to identify the docker image in the registry.
Look in the pom file of what was built to determine what this should be.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>POM_ARTIFACTID</name>
          <description>The maven artifact id.
Look in the pom file of what was built to determine what this should be.</description>
          <defaultValue>coeus</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EC2_INSTANCE_ID</name>
          <description>The id of the EC2 instance that will be running the container based on the docker image wrapping the newly built war file.
Example: i-099de1c5407493f9b</description>
          <defaultValue>i-0258a5f2a87ba7972</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>PROFILE</name>
          <description>Determines which environment/landscape the deployment is for</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>ci</string>
              <string>sandbox</string>
              <string>staging</string>
              <string>qa</string>
              <string>prod</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>DOCKER_TAG=&quot;${ECR_REGISTRY_URL}/${POM_ARTIFACTID}:${POM_VERSION}&quot;
CONTAINER_NAME=&quot;kuali-research&quot;

# Have to encode the command being sent to ssm agent because of quote escaping restrictions.
# (jenkins removes double quotes and escapes single quotes and wraps command args with more single
#  quotes if they contain spaces, making it impossible to provide a string that is acceptable to send-command commands arg)
BASE64=$(\
   echo \
      &quot;if [ -n \&quot;\$(docker ps --filter name=${CONTAINER_NAME} -q)\&quot; ]; then \
         docker rm -f ${CONTAINER_NAME}; \
      fi &amp;&amp; \
      EXISTING_IMAGE_ID=\$(docker images \
            | grep -P \&quot;${ECR_REGISTRY_URL}/${POM_ARTIFACTID}\s+${POM_VERSION}\&quot; \
            | sed -r -n &apos;s/[[:blank:]]+/ /gp&apos; \
            | cut -d &apos; &apos; -f 3) &amp;&amp; \
      if [ -n \&quot;\${EXISTING_IMAGE_ID}\&quot; ]; then \
         docker rmi \${EXISTING_IMAGE_ID}; \
      fi &amp;&amp; \
      \
      eval \$(aws ecr get-login --profile ${PROFILE}) &amp;&amp; \
      docker run \
         -d \
         -p 8181:8080 \
         --restart unless-stopped \
         --name ${CONTAINER_NAME} \
         ${DOCKER_TAG}&quot; | base64 -w 0 \
)

# Execute a docker command using the aws cli on the application host to run a container against the new image in the registry
# DOCUMENTATION: 
#     http://docs.aws.amazon.com/cli/latest/reference/ssm/send-command.html
#     http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/walkthrough-cli.html
run_command_id=$(aws ssm send-command \
   --instance-ids &quot;${EC2_INSTANCE_ID}&quot; \
   --document-name &quot;AWS-RunShellScript&quot; \
   --comment &quot;Running shell script to pull and run container against a new docker image for ${POM_ARTIFACTID}&quot; \
   --parameters \
        commands=&quot;echo &gt;&gt; /tmp/ssm-received &amp;&amp; date &gt;&gt; /tmp/ssm-received &amp;&amp; \
                  echo ${BASE64} | base64 --decode &gt;&gt; /tmp/ssm-received &amp;&amp; \
                  echo ${BASE64} | base64 --decode &gt;&gt; /tmp/ssm-last.sh &amp;&amp; \
                  echo ${BASE64} | base64 --decode | sh&quot; \
   --profile &quot;${PROFILE}&quot; \
   --output text \
   --query &quot;Command.CommandId&quot;) 
   
## Execute a docker command over ssh on the application host to run a container against the new image in the registry
# ssh \
#   jenkins@${REMOTE_DOCKER_HOST} \
#   -i /var/lib/jenkins/.ssh/bu_kuali_id_jenkins_rsa \
#   &quot;set -x &amp;&amp; docker ps &amp;&amp; &quot; \
#   &quot;docker rm -f ${CONTAINER_NAME} || echo &apos;No container to remove.&apos; &amp;&amp; &quot; \
#   &quot;eval $(aws ecr get-login --profile ${PROFILE}) &amp;&amp; &quot; \
#   &quot;docker run&quot; \
#   &quot; -d&quot; \
#   &quot; -p 8181:8080&quot; \
#   &quot; --restart unless-stopped&quot; \
#   &quot; --name ${CONTAINER_NAME}&quot; \
#   &quot; ${DOCKER_TAG} &amp;&amp; &quot; \
#   &quot;docker ps&quot;
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>