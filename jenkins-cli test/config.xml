<?xml version='1.0' encoding='UTF-8'?>
<maven2-moduleset plugin="maven-plugin@2.13">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>VERSION</name>
          <description>version of artifact to build</description>
          <defaultValue>coeus-1603.49</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description>This value specifies any branch that has a ref matching the pattern specified here.
For example, if you tagged a ref as follows: 
     &quot;git tag release/2015.3.1.R a2d8a71&quot;
Then this job would build kuali-research from ref &quot;a2d8a71&quot;
To simply specify the HEAD ref of the master branch use:
     refs/heads/master</description>
          <defaultValue>*/tags/release/*</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REFSPEC</name>
          <description>Specifies references to pull must be tagged and the tag value must start with &quot;release/&quot;
To instead pull the latest from the master branch use:
     +refs/heads/master:refs/remotes/origin/master

Tag the codebase accordingly. For example:
     git tag release/coeus-1603.49 tags/coeus-1603.49
     git tag release/coeus-1603.49 HEAD
     git tag release/coeus-1603.49 a2d8a71
     etc.</description>
          <defaultValue>+refs/tags/release/*:refs/remotes/origin/tags/release/*</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.4">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec>$REFSPEC</refspec>
        <url>https://github.com/whennemuth/kc</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$BRANCH</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <rootModule>
    <groupId>org.kuali.coeus</groupId>
    <artifactId>coeus</artifactId>
  </rootModule>
  <goals>clean validate</goals>
  <aggregatorStyleBuild>true</aggregatorStyleBuild>
  <incrementalBuild>false</incrementalBuild>
  <ignoreUpstremChanges>false</ignoreUpstremChanges>
  <ignoreUnsuccessfulUpstreams>false</ignoreUnsuccessfulUpstreams>
  <archivingDisabled>false</archivingDisabled>
  <siteArchivingDisabled>false</siteArchivingDisabled>
  <fingerprintingDisabled>false</fingerprintingDisabled>
  <resolveDependencies>false</resolveDependencies>
  <processPlugins>false</processPlugins>
  <mavenValidationLevel>-1</mavenValidationLevel>
  <runHeadless>false</runHeadless>
  <disableTriggerDownstreamProjects>false</disableTriggerDownstreamProjects>
  <blockTriggerWhenBuilding>true</blockTriggerWhenBuilding>
  <settings class="jenkins.mvn.DefaultSettingsProvider"/>
  <globalSettings class="jenkins.mvn.DefaultGlobalSettingsProvider"/>
  <reporters/>
  <publishers/>
  <buildWrappers/>
  <prebuilders>
    <hudson.tasks.Shell>
      <command>set +x
echo &quot; &quot;
echo &quot;----------------------------------------------------------------------------&quot;
echo &quot;          M2 DEPENDENCY CHECK (schemaspy, rice, coeus-api, s2sgen)&quot;
echo &quot;----------------------------------------------------------------------------&quot;
echo &quot; &quot;
echo &quot;1) Analyzing pom for versions...&quot;

# Get the content of the pom file with all return/newline characters removed.
content=$(cat pom.xml | sed &apos;:a;N;$!ba;s/\n//g&apos;)

# Get versions of dependencies, use a zero width lookbehind for the open element and capture 
# all following characters thereafter until a closing element character is encountered
 
schemaspy_version=$(echo &quot;$content&quot; | grep -Po &apos;(?&lt;=&lt;schemaspy\.version&gt;)([^&lt;]+)&apos;)
echo &quot;schemaspy version: ${schemaspy_version}&quot;
 
rice_version=$(echo &quot;$content&quot; | grep -Po &apos;(?&lt;=&lt;rice\.version&gt;)([^&lt;]+)&apos;)
echo &quot;rice version: ${rice_version}&quot;
 
api_version=$(echo &quot;$content&quot; | grep -Po &apos;(?&lt;=&lt;coeus\-api\-all\.version&gt;)([^&lt;]+)&apos;)
echo &quot;coeus-api version: ${api_version}&quot;
 
s2sgen_version=$(echo &quot;$content&quot; | grep -Po &apos;(?&lt;=&lt;coeus\-s2sgen\.version&gt;)([^&lt;]+)&apos;)
echo &quot;s2sgen version: ${s2sgen_version}&quot;

echo &quot; &quot;
echo &quot;2) Searching .m2 directory for dependencies installed for above versions...&quot;

repo=&quot;/home/jenkins/.m2/repository&quot;

# file extension, group, version, artifactid, shortname
m2_items=(
   &quot;jar,co/kuali/schemaspy,${schemaspy_version},schemaspy,schemaspy&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-archetype-quickstart,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-core-api,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-db-config,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-deploy,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-development-tools,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-impex-client-bootstrap,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-impex-master,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-impex-server-bootstrap,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-impl,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-it-config,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-ken-api,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-kew-api,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-kim-api,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-kns,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-krad-app-framework,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-krms-api,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-ksb-api,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-legacy-web,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-location-api,rice&quot;
   &quot;war,org/kuali/rice,${rice_version},rice-serviceregistry,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-sql,rice&quot;
   &quot;war,org/kuali/rice,${rice_version},rice-standalone,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-tools-test,rice&quot;
   &quot;war,org/kuali/rice,${rice_version},rice-web,rice&quot;
   &quot;jar,org/kuali/rice,${rice_version},rice-xml,rice&quot;
   &quot;jar,org/kuali/coeus,${api_version},coeus-api-all,coeus-api&quot;
   &quot;jar,org/kuali/coeus,${s2sgen_version},coeus-s2sgen-api,coeus-s2sgen&quot;
   &quot;jar,org/kuali/coeus,${s2sgen_version},coeus-s2sgen-impl,coeus-s2sgen&quot;
)

m2_missing=()

for i in ${m2_items[@]}; do

   IFS=&apos;,&apos; read -ra parts &lt;&lt;&lt; &quot;${i}&quot;

   ext=${parts[0]}
   group=${parts[1]}
   version=${parts[2]}
   artifactid=${parts[3]}
   shortname=${parts[4]}

   artifact=&quot;${repo}/${group}/${artifactid}/${version}/${artifactid}-${version}.${ext}&quot;
   if [ -f $artifact ] ; then
      echo &quot;found: ${artifact}&quot;;
   else
      echo &quot;MISSING: ${artifact}&quot;;
      if [ -z &quot;$(echo ${m2_missing[*]} | grep ${shortname})&quot; ] ; then
         m2_missing+=(${shortname});
      fi
   fi
done

echo &quot; &quot;

if [ ${#m2_missing[@]} -eq 0 ] ; then
   echo &quot;All dependencies accounted for&quot;;
else
   echo &quot;DEPENDENCIES MISSING. Must build the following: ${m2_missing[*]}&quot;;
fi

echo &quot; &quot;
echo &quot;----------------------------------------------------------------------------&quot;
echo &quot;                      FINISHED M2 DEPENDENCY CHECK&quot;
echo &quot;----------------------------------------------------------------------------&quot;
echo &quot; &quot;

java -jar /home/jenkins/jenkins-cli.jar -s http://localhost:8080/ build &apos;jenkins-cli test2&apos; -v -f -p PARM1=hello --username=warren --password=password

set -x

</command>
    </hudson.tasks.Shell>
  </prebuilders>
  <postbuilders/>
  <runPostStepsIfResult>
    <name>FAILURE</name>
    <ordinal>2</ordinal>
    <color>RED</color>
    <completeBuild>true</completeBuild>
  </runPostStepsIfResult>
</maven2-moduleset>